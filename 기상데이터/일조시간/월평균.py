import pandas as pd
import numpy as np
import time
import kma_api

# --------------------------------------------------
# 1. 전국 지점 코드 (ASOS 지점 ID)
# --------------------------------------------------
station_ids = [
    # 강원특별자치도
    '105','100','106','104','93','214','90','121','114','211','217','95','101','216','212',
    # 경기도
    '98','119','202','203','99',
    # 경상남도
    '294','284','253','295','288','255','289','257','263','192','155','162','264','285',
    # 경상북도
    '283','279','273','271','137','136','277','272','281','115','130','278','276','138',
    # 광주광역시
    '156',
    # 대구광역시
    '143','176',
    # 대전광역시
    '133',
    # 부산광역시
    '159','296',
    # 서울특별시
    '116','108',
    # 세종특별자치시
    '239',
    # 울산광역시
    '152',
    # 인천광역시
    '201','102','112',
    # 전라남도
    '259','262','266','165','164','258','174','168','252','170','260','256','175','268','261','169',
    # 전북특별자치도
    '172','251','140','247','243','254','244','248','146','245',
    # 제주특별자치도
    '185','189','187','188','265','184',
    # 충청남도
    '238','235','236','129','232','177',
    # 충청북도
    '226','181','221','131','135','127'
]

# --------------------------------------------------
# 2. 지점-시도 매핑 딕셔너리
# --------------------------------------------------
station_to_region = {
    '105':'강원','100':'강원','106':'강원','104':'강원','93':'강원','214':'강원','90':'강원','121':'강원','114':'강원','211':'강원','217':'강원','95':'강원','101':'강원','216':'강원','212':'강원',
    '98':'경기','119':'경기','202':'경기','203':'경기','99':'경기',
    '294':'경남','284':'경남','253':'경남','295':'경남','288':'경남','255':'경남','289':'경남','257':'경남','263':'경남','192':'경남','155':'경남','162':'경남','264':'경남','285':'경남',
    '283':'경북','279':'경북','273':'경북','271':'경북','137':'경북','136':'경북','277':'경북','272':'경북','281':'경북','115':'경북','130':'경북','278':'경북','276':'경북','138':'경북',
    '156':'광주',
    '143':'대구','176':'대구',
    '133':'대전',
    '159':'부산','296':'부산',
    '116':'서울','108':'서울',
    '239':'세종',
    '152':'울산',
    '201':'인천','102':'인천','112':'인천',
    '259':'전남','262':'전남','266':'전남','165':'전남','164':'전남','258':'전남','174':'전남','168':'전남','252':'전남','170':'전남','260':'전남','256':'전남','175':'전남','268':'전남','261':'전남','169':'전남',
    '172':'전북','251':'전북','140':'전북','247':'전북','243':'전북','254':'전북','244':'전북','248':'전북','146':'전북','245':'전북',
    '185':'제주','189':'제주','187':'제주','188':'제주','265':'제주','184':'제주',
    '238':'충남','235':'충남','236':'충남','129':'충남','232':'충남','177':'충남',
    '226':'충북','181':'충북','221':'충북','131':'충북','135':'충북','127':'충북'
}

# --------------------------------------------------
# 3. 데이터 로딩 및 병합
# --------------------------------------------------
all_weather_dfs = []
failed_stations = []

print("--- 데이터 로딩 시작 ---")

for stn_id in station_ids:
    print(f"지점 {stn_id} 로딩 중...")
    try:
        df = kma_api.get_kma_data(stn_id)

        if df is not None and not df.empty:
            if '날짜' not in df.columns and '일시' in df.columns:
                df = df.rename(columns={'일시': '날짜'})
            df['지점'] = stn_id

            # 컬럼명 정리
            rename_dict = {
                '풍속(평균)': '풍속', '기온(평균)': '기온',
                '일조시간(시간)': '일조시간', '일사량(MJ/m2)': '일사량'
            }
            df.rename(columns={c: rename_dict[c] for c in df.columns if c in rename_dict}, inplace=True)

            all_weather_dfs.append(df)
        else:
            print(f"⚠️ 지점 {stn_id}: 빈 데이터 또는 None 반환됨.")
            failed_stations.append(stn_id)

    except Exception as e:
        print(f"❌ 지점 {stn_id} 오류 발생: {e}")
        failed_stations.append(stn_id)

    time.sleep(0.5)

if not all_weather_dfs:
    raise ValueError("❌ 모든 지점 데이터 로딩 실패!")

weather_df = pd.concat(all_weather_dfs, ignore_index=True)
print("--- 데이터 로딩 완료 ---")

# --------------------------------------------------
# 4. 데이터 정제
# --------------------------------------------------
weather_df['날짜'] = pd.to_datetime(weather_df['날짜'], format='%Y%m%d', errors='coerce')
for col in ['풍속', '기온', '일조시간', '일사량']:
    weather_df[col] = pd.to_numeric(weather_df[col], errors='coerce')

weather_df = weather_df.replace([-9.0, -99.0, -99.9], np.nan)
weather_df = weather_df.sort_values(by=['지점', '날짜']).set_index('날짜')

# --------------------------------------------------
# 5. 월별 집계 (풍속·기온 평균 / 일조시간·일사량 합계)
# --------------------------------------------------
monthly_df = (
    weather_df
    .groupby('지점')
    .resample('M')
    .agg({
        '풍속': 'mean',
        '기온': 'mean',
        '일조시간': 'sum',
        '일사량': 'sum'
    })
    .reset_index()
)

monthly_df['날짜'] = monthly_df['날짜'].dt.to_period('M')
monthly_df['시도'] = monthly_df['지점'].map(station_to_region)

# --------------------------------------------------
# 6. 시도별 평균 집계
# --------------------------------------------------
region_monthly_df = (
    monthly_df
    .groupby(['시도', '날짜'])
    .agg({
        '풍속': 'mean',
        '기온': 'mean',
        '일조시간': 'mean',
        '일사량': 'mean'
    })
    .reset_index()
    .set_index(['시도', '날짜'])
)

# --------------------------------------------------
# 7. 결과 확인 및 저장
# --------------------------------------------------
print("\n✅ 시도별 월평균 기상요소 계산 완료")
print(region_monthly_df.head(15))

region_monthly_df.to_csv('region_monthly_weather.csv', encoding='utf-8-sig')
print("\n💾 'region_monthly_weather.csv' 저장 완료!")
